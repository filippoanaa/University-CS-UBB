(defun frecventa (l e)
  (cond
    ((and (atom l) (eq l e))1)
    ((atom l) 0)
    (t (apply #'+ (mapcar #'(lambda (x)
                                (frecventa x e)
    )l)))
  )
)

(print (frecventa '(1 2 2 (2)) 2))



(defun elimina (l e)
  (cond
    ((null l) nil)
    ((eq (car l) e) (elimina (cdr l) e))
    (t(cons (car l) (elimina (cdr l) e)))
  )
)

;(print (elimina '(1 2 3 3) 3))


(defun perechi (l)
  (cond
    ((null l) nil)
    (t(append (list (cons (car l) (list (frecventa l (car l))))) 
      (perechi (elimina l (car l)))
    ))
  )
)

(print (perechi '(1 2 2 3)))

(defun liniarizeaza (l)
  (cond 
    ((and (atom l) (numberp l))l)
    ((atom l) (list l))
    (t(mapcan #'liniarizeaza l))
  )
)

(print (liniarizeaza '(1 2 (3 (3)4))))


(defun perechi2 (l)
  (cond
    ((null l) nil)
    (t(append (list (cons (car l) (list (frecventa l (car l))))) 
      (perechi2 (elimina (liniarizeaza l) (car l)))
    ))
  )
)


(print (perechi2 '(A (B 2) A B 5 A C A)))
(print (perechi2 '(A A A A A)))
(print (perechi2 '(a (b (c (d) e) f))))
(print (perechi2 '(a (1 b 2) (c 4 (5 6) b )a)))
